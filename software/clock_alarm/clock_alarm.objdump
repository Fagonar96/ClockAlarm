
clock_alarm.elf:     file format elf32-littlenios2
clock_alarm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000214 memsz 0x00000214 flags r-x
    LOAD off    0x00001234 vaddr 0x00000234 paddr 0x00000238 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000123c vaddr 0x0000023c paddr 0x0000023c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001238  2**0
                  CONTENTS
  2 .text         000001fc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000021c  0000021c  0000121c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00000234  00000238  00001234  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000023c  0000023c  0000123c  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00000248  00000248  00001238  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001268  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000640f  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001564  00000000  00000000  000077df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001344  00000000  00000000  00008d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  0000a088  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b5e  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001a1  00000000  00000000  0000ad76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000af18  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  0000af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000bd13  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000bd16  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bd19  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bd1a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000bd1b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000bd1f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000bd23  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000bd27  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000a  00000000  00000000  0000bd2d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000021c l    d  .rodata	00000000 .rodata
00000234 l    d  .rwdata	00000000 .rwdata
0000023c l    d  .bss	00000000 .bss
00000248 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/Quartus/software/clock_alarm_bsp/obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000138 g     F .text	0000002c alt_main
00000238 g       *ABS*	00000000 __flash_rwdata_start
00000164 g     F .text	00000038 alt_putstr
000001f8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000240 g     O .bss	00000004 alt_argv
00008234 g       *ABS*	00000000 _gp
00000248 g       *ABS*	00000000 __bss_end
000001f0 g     F .text	00000004 alt_dcache_flush_all
00000238 g       *ABS*	00000000 __ram_rwdata_end
00000234 g       *ABS*	00000000 __ram_rodata_end
00000248 g       *ABS*	00000000 end
00001000 g       *ABS*	00000000 __alt_stack_pointer
000001c0 g     F .text	00000030 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
000001bc g     F .text	00000004 alt_sys_init
00000234 g       *ABS*	00000000 __ram_rwdata_start
0000021c g       *ABS*	00000000 __ram_rodata_start
00000248 g       *ABS*	00000000 __alt_stack_base
0000023c g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000028 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
0000023c g     O .bss	00000004 alt_envp
00000234 g     O .rwdata	00000004 JTAG
0000021c g       *ABS*	00000000 __flash_rodata_start
0000019c g     F .text	00000020 alt_irq_init
00000244 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000238 g       *ABS*	00000000 _edata
00000248 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000200 g     F .text	0000001c strlen
000001f4 g     F .text	00000004 alt_icache_flush_all
00000084 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a08d14 	ori	gp,gp,33332
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10808f14 	ori	r2,r2,572

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c09214 	ori	r3,r3,584

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000840 	call	84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001380 	call	138 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
}
**/

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
{ 
  60:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  64:	21008704 	addi	r4,r4,540
{ 
  68:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  6c:	00001640 	call	164 <alt_putstr>

  //init_button_pio();

  volatile unsigned char* edge_capture_pointer = (unsigned char*) LEDS_BASE;

  *edge_capture_pointer = 0;
  70:	00040005 	stb	zero,4096(zero)

  /* Event loop never exits. */
  while (1)
  {
	  *edge_capture_pointer =  *edge_capture_pointer + 1;
  74:	00840003 	ldbu	r2,4096(zero)
  78:	10800044 	addi	r2,r2,1
  7c:	00840005 	stb	r2,4096(zero)
  80:	003ffc06 	br	74 <main+0x18>

00000084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  84:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  88:	00800034 	movhi	r2,0
  8c:	00c00034 	movhi	r3,0
  90:	dfc00015 	stw	ra,0(sp)
  94:	10808d04 	addi	r2,r2,564
  98:	18c08e04 	addi	r3,r3,568
  9c:	10c00326 	beq	r2,r3,ac <alt_load+0x28>
  {
    while( to != end )
  a0:	01000034 	movhi	r4,0
  a4:	21008e04 	addi	r4,r4,568
  a8:	1100141e 	bne	r2,r4,fc <alt_load+0x78>
  if (to != from)
  ac:	00800034 	movhi	r2,0
  b0:	00c00034 	movhi	r3,0
  b4:	10800804 	addi	r2,r2,32
  b8:	18c00804 	addi	r3,r3,32
  bc:	10c00326 	beq	r2,r3,cc <alt_load+0x48>
    while( to != end )
  c0:	01000034 	movhi	r4,0
  c4:	21000804 	addi	r4,r4,32
  c8:	1100111e 	bne	r2,r4,110 <alt_load+0x8c>
  if (to != from)
  cc:	00800034 	movhi	r2,0
  d0:	00c00034 	movhi	r3,0
  d4:	10808704 	addi	r2,r2,540
  d8:	18c08704 	addi	r3,r3,540
  dc:	10c00326 	beq	r2,r3,ec <alt_load+0x68>
    while( to != end )
  e0:	01000034 	movhi	r4,0
  e4:	21008d04 	addi	r4,r4,564
  e8:	11000e1e 	bne	r2,r4,124 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  ec:	00001f00 	call	1f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  f0:	dfc00017 	ldw	ra,0(sp)
  f4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
  f8:	00001f41 	jmpi	1f4 <alt_icache_flush_all>
    {
      *to++ = *from++;
  fc:	19400017 	ldw	r5,0(r3)
 100:	10800104 	addi	r2,r2,4
 104:	18c00104 	addi	r3,r3,4
 108:	117fff15 	stw	r5,-4(r2)
 10c:	003fe606 	br	a8 <alt_load+0x24>
 110:	19400017 	ldw	r5,0(r3)
 114:	10800104 	addi	r2,r2,4
 118:	18c00104 	addi	r3,r3,4
 11c:	117fff15 	stw	r5,-4(r2)
 120:	003fe906 	br	c8 <alt_load+0x44>
 124:	19400017 	ldw	r5,0(r3)
 128:	10800104 	addi	r2,r2,4
 12c:	18c00104 	addi	r3,r3,4
 130:	117fff15 	stw	r5,-4(r2)
 134:	003fec06 	br	e8 <alt_load+0x64>

00000138 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 138:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 13c:	0009883a 	mov	r4,zero
{
 140:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 144:	000019c0 	call	19c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 148:	00001bc0 	call	1bc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 14c:	d1a00217 	ldw	r6,-32760(gp)
 150:	d1600317 	ldw	r5,-32756(gp)
 154:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 158:	dfc00017 	ldw	ra,0(sp)
 15c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 160:	000005c1 	jmpi	5c <main>

00000164 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 164:	defffe04 	addi	sp,sp,-8
 168:	dc000015 	stw	r16,0(sp)
 16c:	dfc00115 	stw	ra,4(sp)
 170:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 174:	00002000 	call	200 <strlen>
 178:	01000034 	movhi	r4,0
 17c:	000f883a 	mov	r7,zero
 180:	100d883a 	mov	r6,r2
 184:	800b883a 	mov	r5,r16
 188:	21008d04 	addi	r4,r4,564
#else
    return fputs(str, stdout);
#endif
#endif
}
 18c:	dfc00117 	ldw	ra,4(sp)
 190:	dc000017 	ldw	r16,0(sp)
 194:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 198:	00001c01 	jmpi	1c0 <altera_avalon_jtag_uart_write>

0000019c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 19c:	deffff04 	addi	sp,sp,-4
 1a0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 1a4:	00001f80 	call	1f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1a8:	00800044 	movi	r2,1
 1ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1b0:	dfc00017 	ldw	ra,0(sp)
 1b4:	dec00104 	addi	sp,sp,4
 1b8:	f800283a 	ret

000001bc <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
}
 1bc:	f800283a 	ret

000001c0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 1c0:	21000017 	ldw	r4,0(r4)
{
 1c4:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
 1c8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 1cc:	29800136 	bltu	r5,r6,1d4 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 1d0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1d4:	20c00137 	ldwio	r3,4(r4)
 1d8:	18ffffec 	andhi	r3,r3,65535
 1dc:	183ffb26 	beq	r3,zero,1cc <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 1e0:	29400044 	addi	r5,r5,1
 1e4:	28ffffc7 	ldb	r3,-1(r5)
 1e8:	20c00035 	stwio	r3,0(r4)
 1ec:	003ff706 	br	1cc <altera_avalon_jtag_uart_write+0xc>

000001f0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1f0:	f800283a 	ret

000001f4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1f4:	f800283a 	ret

000001f8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1f8:	000170fa 	wrctl	ienable,zero
}
 1fc:	f800283a 	ret

00000200 <strlen>:
 200:	2005883a 	mov	r2,r4
 204:	10c00007 	ldb	r3,0(r2)
 208:	1800021e 	bne	r3,zero,214 <strlen+0x14>
 20c:	1105c83a 	sub	r2,r2,r4
 210:	f800283a 	ret
 214:	10800044 	addi	r2,r2,1
 218:	003ffa06 	br	204 <strlen+0x4>
