
clock_alarm.elf:     file format elf32-littlenios2
clock_alarm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000b7c memsz 0x00000b7c flags r-x
    LOAD off    0x00001b9c vaddr 0x00000b9c paddr 0x00000c00 align 2**12
         filesz 0x00000064 memsz 0x00000064 flags rw-
    LOAD off    0x00001c64 vaddr 0x00000c64 paddr 0x00000c64 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000008f8  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  00000a78  00000a78  00001a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000064  00000b9c  00000c00  00001b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  00000c64  00000c64  00001c64  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00000d90  00000d90  00001c00  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009bb1  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000237e  00000000  00000000  0000ba91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000023d7  00000000  00000000  0000de0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003c0  00000000  00000000  000101e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015fa  00000000  00000000  000105a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e30  00000000  00000000  00011ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000129d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000208  00000000  00000000  000129e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001413b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001413e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00014141  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00014142  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00014143  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00014147  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001414b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001414f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000d  00000000  00000000  00014155  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00000a78 l    d  .rodata	00000000 .rodata
00000b9c l    d  .rwdata	00000000 .rwdata
00000c64 l    d  .bss	00000000 .bss
00000d90 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/ClockAlarm/software/clock_alarm_bsp/obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 clock_alarm.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000c8c g     O .bss	00000004 alt_instruction_exception_handler
00000bd4 g     O .rwdata	00000004 TIMER
00000958 g     F .text	0000002c alt_main
00000bc4 g     O .rwdata	00000004 SET_MODE_BUTTON_EDGE
00000ba0 g     O .rwdata	00000004 CONFIRM_BUTTON_EDGE
00000c90 g     O .bss	00000100 alt_irq
00000c00 g       *ABS*	00000000 __flash_rwdata_start
00000234 g     F .text	00000048 handle_increase_hour_interrupt
00000c84 g     O .bss	00000004 altera_avalon_timer_ts_freq
00000984 g     F .text	00000038 alt_putstr
00000a54 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000bac g     O .rwdata	00000004 INC_MIN_BUTTON_EDGE
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000c7c g     O .bss	00000004 alt_argv
00008b9c g       *ABS*	00000000 _gp
000002c0 g     F .text	00000068 handle_confirm_button_interrupt
00000474 g     F .text	0000003c timer_setup
00000bcc g     O .rwdata	00000004 SET_MODE_BUTTON
00000bb0 g     O .rwdata	00000004 INC_MIN_BUTTON_MASK
00000c70 g     O .bss	00000004 pulse_value
00000bec g     O .rwdata	00000004 HOUR_1_DATA
00000a2c g     F .text	00000028 alt_exception_cause_generated_bad_addr
00000bf0 g     O .rwdata	00000004 alarm_time
000006f0 g     F .text	00000064 .hidden __udivsi3
00000328 g     F .text	00000040 check_alarm
00000bbc g     O .rwdata	00000004 INC_HOUR_BUTTON_MASK
00000d90 g       *ABS*	00000000 __bss_end
0000083c g     F .text	00000068 alt_iic_isr_register
00000824 g     F .text	00000018 alt_ic_irq_enabled
00000c74 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000a24 g     F .text	00000004 alt_dcache_flush_all
00000bd8 g     O .rwdata	00000004 SECOND_2_DATA
00000bdc g     O .rwdata	00000004 SECOND_1_DATA
00000c00 g       *ABS*	00000000 __ram_rwdata_end
00000be4 g     O .rwdata	00000004 MINUTE_1_DATA
00000b9c g       *ABS*	00000000 __ram_rodata_end
00000754 g     F .text	0000005c .hidden __umodsi3
00000d90 g       *ABS*	00000000 end
00000b9c g     O .rwdata	00000004 mode
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00001000 g       *ABS*	00000000 __alt_stack_pointer
000009f4 g     F .text	00000030 altera_avalon_jtag_uart_write
00000180 g     F .text	0000003c _start
00000c6c g     O .bss	00000004 time_counter
000009dc g     F .text	00000018 alt_sys_init
00000b9c g       *ABS*	00000000 __ram_rwdata_start
00000a78 g       *ABS*	00000000 __ram_rodata_start
00000398 g     F .text	000000dc update_displays
000004b0 g     F .text	000000dc system_setup
00000d90 g       *ABS*	00000000 __alt_stack_base
00000c64 g       *ABS*	00000000 __bss_start
0000058c g     F .text	0000006c main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00000c78 g     O .bss	00000004 alt_envp
00000bfc g     O .rwdata	00000004 JTAG
00000bf4 g     O .rwdata	00000004 LED_DATA
0000027c g     F .text	00000044 handle_increase_min_interrupt
000005f8 g     F .text	00000080 .hidden __divsi3
00000a78 g       *ABS*	00000000 __flash_rodata_start
000009bc g     F .text	00000020 alt_irq_init
00000be0 g     O .rwdata	00000004 MINUTE_2_DATA
00000bc8 g     O .rwdata	00000004 SET_MODE_BUTTON_MASK
00000c80 g     O .bss	00000004 alt_argc
00000368 g     F .text	00000030 timer_interrupt
00000c88 g     O .bss	00000004 altera_avalon_timer_ts_base
00000020 g       .exceptions	00000000 alt_irq_entry
00000be8 g     O .rwdata	00000004 HOUR_2_DATA
00000bb8 g     O .rwdata	00000004 INC_HOUR_BUTTON_EDGE
00000020 g       *ABS*	00000000 __ram_exceptions_start
000007b0 g     F .text	00000004 alt_ic_isr_register
00000c00 g       *ABS*	00000000 _edata
00000d90 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
000007ec g     F .text	00000038 alt_ic_irq_disable
00000678 g     F .text	00000078 .hidden __modsi3
00001000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000bd0 g     O .rwdata	00000004 TIMER_CONTROL
0000000c g       .entry	00000000 _exit
00000c64 g     O .bss	00000004 minutes
00000bc0 g     O .rwdata	00000004 INC_HOUR_BUTTON
00000a5c g     F .text	0000001c strlen
000001bc g     F .text	00000078 handle_set_mode_button_interrupt
00000a28 g     F .text	00000004 alt_icache_flush_all
00000c68 g     O .bss	00000004 hours
00000bf8 g     O .rwdata	00000004 alt_priority_mask
000007b4 g     F .text	00000038 alt_ic_irq_enable
00000ba8 g     O .rwdata	00000004 CONFIRM_BUTTON
00000ba4 g     O .rwdata	00000004 CONFIRM_BUTTON_MASK
00000bb4 g     O .rwdata	00000004 INC_MIN_BUTTON
000008a4 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	84032404 	addi	r16,r16,3216
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a03c17 	ldw	r2,-32528(gp)
 160:	10000426 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 164:	200b883a 	mov	r5,r4
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
 188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 18c:	d6a2e714 	ori	gp,gp,35740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 194:	10831914 	ori	r2,r2,3172

    movhi r3, %hi(__bss_end)
 198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 19c:	18c36414 	ori	r3,r3,3472

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	00008a40 	call	8a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00009580 	call	958 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <handle_set_mode_button_interrupt>:
volatile unsigned int hours = 0;
volatile unsigned int minutes = 0;

void handle_set_mode_button_interrupt(void *context)
{
	alt_putstr("Set mode button interrupt ...\n");
 1bc:	01000034 	movhi	r4,0
{
 1c0:	deffff04 	addi	sp,sp,-4
	alt_putstr("Set mode button interrupt ...\n");
 1c4:	21029e04 	addi	r4,r4,2680
{
 1c8:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Set mode button interrupt ...\n");
 1cc:	00009840 	call	984 <alt_putstr>

	switch (mode)
 1d0:	d0a00017 	ldw	r2,-32768(gp)
 1d4:	10c00060 	cmpeqi	r3,r2,1
 1d8:	1800071e 	bne	r3,zero,1f8 <handle_set_mode_button_interrupt+0x3c>
 1dc:	108000a0 	cmpeqi	r2,r2,2
 1e0:	10000f1e 	bne	r2,zero,220 <handle_set_mode_button_interrupt+0x64>
		case ALARM_MODE:
			alt_putstr("Set run mode: ON ...\n");
			mode = RUN_MODE;
			break;
		default:
			alt_putstr("Set time mode: ON ...\n");
 1e4:	01000034 	movhi	r4,0
 1e8:	2102b204 	addi	r4,r4,2760
 1ec:	00009840 	call	984 <alt_putstr>
			mode = TIME_MODE;
 1f0:	00800044 	movi	r2,1
 1f4:	00000406 	br	208 <handle_set_mode_button_interrupt+0x4c>
			alt_putstr("Set alarm mode: ON ...\n");
 1f8:	01000034 	movhi	r4,0
 1fc:	2102a604 	addi	r4,r4,2712
 200:	00009840 	call	984 <alt_putstr>
			mode = ALARM_MODE;
 204:	00800084 	movi	r2,2
			mode = TIME_MODE;
 208:	d0a00015 	stw	r2,-32768(gp)
			break;
	}

	*(SET_MODE_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 20c:	d0a00a17 	ldw	r2,-32728(gp)
 210:	10000005 	stb	zero,0(r2)
}
 214:	dfc00017 	ldw	ra,0(sp)
 218:	dec00104 	addi	sp,sp,4
 21c:	f800283a 	ret
			alt_putstr("Set run mode: ON ...\n");
 220:	01000034 	movhi	r4,0
 224:	2102ac04 	addi	r4,r4,2736
 228:	00009840 	call	984 <alt_putstr>
			mode = RUN_MODE;
 22c:	008000c4 	movi	r2,3
 230:	003ff506 	br	208 <handle_set_mode_button_interrupt+0x4c>

00000234 <handle_increase_hour_interrupt>:

void handle_increase_hour_interrupt(void *context)
{
	alt_putstr("Increase hour button interrupt ...\n");
 234:	01000034 	movhi	r4,0
{
 238:	deffff04 	addi	sp,sp,-4
	alt_putstr("Increase hour button interrupt ...\n");
 23c:	2102b804 	addi	r4,r4,2784
{
 240:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Increase hour button interrupt ...\n");
 244:	00009840 	call	984 <alt_putstr>

	hours += 3600;
 248:	d0a03317 	ldw	r2,-32564(gp)
 24c:	10838404 	addi	r2,r2,3600
 250:	d0a03315 	stw	r2,-32564(gp)

	if (hours > 86400)
 254:	d0e03317 	ldw	r3,-32564(gp)
 258:	00800074 	movhi	r2,1
 25c:	10946004 	addi	r2,r2,20864
 260:	10c0012e 	bgeu	r2,r3,268 <handle_increase_hour_interrupt+0x34>
	{
		hours = 0;
 264:	d0203315 	stw	zero,-32564(gp)
	}

	*(INC_HOUR_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 268:	d0a00717 	ldw	r2,-32740(gp)
 26c:	10000005 	stb	zero,0(r2)
}
 270:	dfc00017 	ldw	ra,0(sp)
 274:	dec00104 	addi	sp,sp,4
 278:	f800283a 	ret

0000027c <handle_increase_min_interrupt>:

void handle_increase_min_interrupt(void *context)
{
	alt_putstr("Increase minute button interrupt ...\n");
 27c:	01000034 	movhi	r4,0
{
 280:	deffff04 	addi	sp,sp,-4
	alt_putstr("Increase minute button interrupt ...\n");
 284:	2102c104 	addi	r4,r4,2820
{
 288:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Increase minute button interrupt ...\n");
 28c:	00009840 	call	984 <alt_putstr>

	minutes += 60;
 290:	d0a03217 	ldw	r2,-32568(gp)
 294:	10800f04 	addi	r2,r2,60
 298:	d0a03215 	stw	r2,-32568(gp)

	if (minutes > 3600)
 29c:	d0a03217 	ldw	r2,-32568(gp)
 2a0:	10838470 	cmpltui	r2,r2,3601
 2a4:	1000011e 	bne	r2,zero,2ac <handle_increase_min_interrupt+0x30>
	{
		minutes = 0;
 2a8:	d0203215 	stw	zero,-32568(gp)
	}

	*(INC_MIN_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 2ac:	d0a00417 	ldw	r2,-32752(gp)
 2b0:	10000005 	stb	zero,0(r2)
}
 2b4:	dfc00017 	ldw	ra,0(sp)
 2b8:	dec00104 	addi	sp,sp,4
 2bc:	f800283a 	ret

000002c0 <handle_confirm_button_interrupt>:

void handle_confirm_button_interrupt(void *context)
{
	alt_putstr("Confirm button interrupt ...\n");
 2c0:	01000034 	movhi	r4,0
{
 2c4:	deffff04 	addi	sp,sp,-4
	alt_putstr("Confirm button interrupt ...\n");
 2c8:	2102cb04 	addi	r4,r4,2860
{
 2cc:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Confirm button interrupt ...\n");
 2d0:	00009840 	call	984 <alt_putstr>

	if (mode == TIME_MODE)
 2d4:	d0a00017 	ldw	r2,-32768(gp)
 2d8:	10800058 	cmpnei	r2,r2,1
 2dc:	1000041e 	bne	r2,zero,2f0 <handle_confirm_button_interrupt+0x30>
	{
		time_counter = hours + minutes;
 2e0:	d0a03317 	ldw	r2,-32564(gp)
 2e4:	d0e03217 	ldw	r3,-32568(gp)
 2e8:	10c5883a 	add	r2,r2,r3
 2ec:	d0a03415 	stw	r2,-32560(gp)
	}
	if (mode == ALARM_MODE)
 2f0:	d0a00017 	ldw	r2,-32768(gp)
 2f4:	10800098 	cmpnei	r2,r2,2
 2f8:	1000041e 	bne	r2,zero,30c <handle_confirm_button_interrupt+0x4c>
	{
		alarm_time = hours + minutes;
 2fc:	d0a03317 	ldw	r2,-32564(gp)
 300:	d0e03217 	ldw	r3,-32568(gp)
 304:	10c5883a 	add	r2,r2,r3
 308:	d0a01515 	stw	r2,-32684(gp)
	}

	*(CONFIRM_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 30c:	d0a00117 	ldw	r2,-32764(gp)
 310:	10000005 	stb	zero,0(r2)

	mode = RUN_MODE;
 314:	008000c4 	movi	r2,3
 318:	d0a00015 	stw	r2,-32768(gp)
}
 31c:	dfc00017 	ldw	ra,0(sp)
 320:	dec00104 	addi	sp,sp,4
 324:	f800283a 	ret

00000328 <check_alarm>:
 * to the LEDS to turn it on and off
 */
void check_alarm(int current_time) {
	// Checks if the current time is between the
	// alarm time and alarm time plus ALARM_DURATION seconds
	if (alarm_time <= current_time && current_time <= alarm_time + ALARM_DURATION) {
 328:	d0a01517 	ldw	r2,-32684(gp)
 32c:	20800d36 	bltu	r4,r2,364 <check_alarm+0x3c>
 330:	d0a01517 	ldw	r2,-32684(gp)
 334:	108007c4 	addi	r2,r2,31
 338:	11000a36 	bltu	r2,r4,364 <check_alarm+0x3c>
		*LED_DATA = pulse_value;
 33c:	d0e03517 	ldw	r3,-32556(gp)
 340:	d0a01617 	ldw	r2,-32680(gp)
 344:	10c00005 	stb	r3,0(r2)

		if (pulse_value == 1) pulse_value = 0;
 348:	d0a03517 	ldw	r2,-32556(gp)
 34c:	10800058 	cmpnei	r2,r2,1
 350:	1000021e 	bne	r2,zero,35c <check_alarm+0x34>
 354:	d0203515 	stw	zero,-32556(gp)
 358:	f800283a 	ret
		else pulse_value = 1;
 35c:	00800044 	movi	r2,1
 360:	d0a03515 	stw	r2,-32556(gp)

		// alt_putstr("Alarm!\n");
	}
}
 364:	f800283a 	ret

00000368 <timer_interrupt>:
 * Function that is executed when the timer
 * generates an interruption
 */
void timer_interrupt(void* isr_context) {
	// Resets the interruption
	*TIMER = 0x0;
 368:	d0a00e17 	ldw	r2,-32712(gp)
 36c:	10000005 	stb	zero,0(r2)

	// Time counter increases
	time_counter++;
 370:	d0a03417 	ldw	r2,-32560(gp)
 374:	10800044 	addi	r2,r2,1
 378:	d0a03415 	stw	r2,-32560(gp)

	// Checks if a day has passed
	if (SECONDS_IN_DAY < time_counter) {
 37c:	d0e03417 	ldw	r3,-32560(gp)
 380:	00800074 	movhi	r2,1
 384:	10946004 	addi	r2,r2,20864
 388:	10c0012e 	bgeu	r2,r3,390 <timer_interrupt+0x28>
		time_counter = 0;
 38c:	d0203415 	stw	zero,-32560(gp)
	}

	check_alarm(time_counter);
 390:	d1203417 	ldw	r4,-32560(gp)
 394:	00003281 	jmpi	328 <check_alarm>

00000398 <update_displays>:


/**
 * This function updates display's data based on the current time
**/
void update_displays(int current_time) {
 398:	defffc04 	addi	sp,sp,-16
    // Get the hours based on the current time
    int hours = current_time / 3600;

    // Get the seconds left based on the remainder of the hours calculation,
    // and with that the minutes are calculated
    int seconds_left = current_time % 3600;
 39c:	01438404 	movi	r5,3600
void update_displays(int current_time) {
 3a0:	dfc00315 	stw	ra,12(sp)
 3a4:	dc800215 	stw	r18,8(sp)
 3a8:	dc400115 	stw	r17,4(sp)
 3ac:	dc000015 	stw	r16,0(sp)
 3b0:	2025883a 	mov	r18,r4
    int seconds_left = current_time % 3600;
 3b4:	00006780 	call	678 <__modsi3>
    int minutes = seconds_left / 60;

    // Get the seconds based on the remainder of the minutes calculation
    int seconds = seconds_left % 60;
 3b8:	01400f04 	movi	r5,60
 3bc:	1009883a 	mov	r4,r2
    int seconds_left = current_time % 3600;
 3c0:	1021883a 	mov	r16,r2
    int seconds = seconds_left % 60;
 3c4:	00006780 	call	678 <__modsi3>

    *HOUR_1_DATA = hours / 10;  // First hours digit
 3c8:	9009883a 	mov	r4,r18
 3cc:	01632814 	movui	r5,36000
    int seconds = seconds_left % 60;
 3d0:	1023883a 	mov	r17,r2
    *HOUR_1_DATA = hours / 10;  // First hours digit
 3d4:	00005f80 	call	5f8 <__divsi3>
 3d8:	d0e01417 	ldw	r3,-32688(gp)
    int hours = current_time / 3600;
 3dc:	9009883a 	mov	r4,r18
 3e0:	01438404 	movi	r5,3600
    *HOUR_1_DATA = hours / 10;  // First hours digit
 3e4:	18800005 	stb	r2,0(r3)
    int hours = current_time / 3600;
 3e8:	00005f80 	call	5f8 <__divsi3>
    *HOUR_2_DATA = hours % 10;  // Second hours digit
 3ec:	01400284 	movi	r5,10
 3f0:	1009883a 	mov	r4,r2
 3f4:	00006780 	call	678 <__modsi3>
 3f8:	d0e01317 	ldw	r3,-32692(gp)

    *MINUTE_1_DATA = minutes / 10;  // First minutes digit
 3fc:	8009883a 	mov	r4,r16
 400:	01409604 	movi	r5,600
    *HOUR_2_DATA = hours % 10;  // Second hours digit
 404:	18800005 	stb	r2,0(r3)
    *MINUTE_1_DATA = minutes / 10;  // First minutes digit
 408:	00005f80 	call	5f8 <__divsi3>
 40c:	d0e01217 	ldw	r3,-32696(gp)
    int minutes = seconds_left / 60;
 410:	8009883a 	mov	r4,r16
 414:	01400f04 	movi	r5,60
    *MINUTE_1_DATA = minutes / 10;  // First minutes digit
 418:	18800005 	stb	r2,0(r3)
    int minutes = seconds_left / 60;
 41c:	00005f80 	call	5f8 <__divsi3>
    *MINUTE_2_DATA = minutes % 10;  // Second minutes digit
 420:	01400284 	movi	r5,10
 424:	1009883a 	mov	r4,r2
 428:	00006780 	call	678 <__modsi3>
 42c:	d0e01117 	ldw	r3,-32700(gp)

    *SECOND_1_DATA = seconds / 10;  // First seconds digit
 430:	8809883a 	mov	r4,r17
 434:	01400284 	movi	r5,10
    *MINUTE_2_DATA = minutes % 10;  // Second minutes digit
 438:	18800005 	stb	r2,0(r3)
    *SECOND_1_DATA = seconds / 10;  // First seconds digit
 43c:	00005f80 	call	5f8 <__divsi3>
 440:	d0e01017 	ldw	r3,-32704(gp)
    *SECOND_2_DATA = seconds % 10;  // First seconds digit
 444:	01400284 	movi	r5,10
 448:	8809883a 	mov	r4,r17
    *SECOND_1_DATA = seconds / 10;  // First seconds digit
 44c:	18800005 	stb	r2,0(r3)
    *SECOND_2_DATA = seconds % 10;  // First seconds digit
 450:	00006780 	call	678 <__modsi3>
 454:	d0e00f17 	ldw	r3,-32708(gp)
 458:	18800005 	stb	r2,0(r3)
}
 45c:	dfc00317 	ldw	ra,12(sp)
 460:	dc800217 	ldw	r18,8(sp)
 464:	dc400117 	ldw	r17,4(sp)
 468:	dc000017 	ldw	r16,0(sp)
 46c:	dec00404 	addi	sp,sp,16
 470:	f800283a 	ret

00000474 <timer_setup>:

/**
 * Setup function for the interval timer, it registers the
 * interruption and activates the timer
 */
void timer_setup() {
 474:	defffe04 	addi	sp,sp,-8
  // Register the timer interrupt function
  alt_ic_isr_register(
 478:	01800034 	movhi	r6,0
 47c:	d8000015 	stw	zero,0(sp)
 480:	000f883a 	mov	r7,zero
 484:	3180da04 	addi	r6,r6,872
 488:	01400144 	movi	r5,5
 48c:	0009883a 	mov	r4,zero
void timer_setup() {
 490:	dfc00115 	stw	ra,4(sp)
  alt_ic_isr_register(
 494:	00007b00 	call	7b0 <alt_ic_isr_register>
		  0,
		  0x0
  );

  // Init timer & enable interrupt
  *TIMER_CONTROL = 0x07;
 498:	d0a00d17 	ldw	r2,-32716(gp)
 49c:	00c001c4 	movi	r3,7
 4a0:	10c00005 	stb	r3,0(r2)
}
 4a4:	dfc00117 	ldw	ra,4(sp)
 4a8:	dec00204 	addi	sp,sp,8
 4ac:	f800283a 	ret

000004b0 <system_setup>:

void system_setup()
{
	alt_putstr("Initializing system ...\n");
 4b0:	01000034 	movhi	r4,0
{
 4b4:	defffe04 	addi	sp,sp,-8
	alt_putstr("Initializing system ...\n");
 4b8:	2102d304 	addi	r4,r4,2892
{
 4bc:	dfc00115 	stw	ra,4(sp)
	alt_putstr("Initializing system ...\n");
 4c0:	00009840 	call	984 <alt_putstr>

	*(SET_MODE_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
 4c4:	d0e00b17 	ldw	r3,-32724(gp)
 4c8:	008001c4 	movi	r2,7

	*(CONFIRM_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
	*(CONFIRM_BUTTON_EDGE) = 0x00; // Resets the interrupt.

	// Registers the set mode button input interrupt.
	alt_ic_isr_register(SET_MODE_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 4cc:	01800034 	movhi	r6,0
	*(SET_MODE_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
 4d0:	18800005 	stb	r2,0(r3)
	*(SET_MODE_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 4d4:	d0e00a17 	ldw	r3,-32728(gp)
	alt_ic_isr_register(SET_MODE_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 4d8:	000f883a 	mov	r7,zero
 4dc:	31806f04 	addi	r6,r6,444
	*(SET_MODE_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 4e0:	18000005 	stb	zero,0(r3)
	*(INC_HOUR_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
 4e4:	d0e00817 	ldw	r3,-32736(gp)
	alt_ic_isr_register(SET_MODE_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 4e8:	01400044 	movi	r5,1
 4ec:	0009883a 	mov	r4,zero
	*(INC_HOUR_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
 4f0:	18800005 	stb	r2,0(r3)
	*(INC_HOUR_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 4f4:	d0e00717 	ldw	r3,-32740(gp)
 4f8:	18000005 	stb	zero,0(r3)
	*(INC_MIN_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
 4fc:	d0e00517 	ldw	r3,-32748(gp)
 500:	18800005 	stb	r2,0(r3)
	*(INC_MIN_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 504:	d0e00417 	ldw	r3,-32752(gp)
 508:	18000005 	stb	zero,0(r3)
	*(CONFIRM_BUTTON_MASK) = 0x07; // Write enable to IRQ mask.
 50c:	d0e00217 	ldw	r3,-32760(gp)
 510:	18800005 	stb	r2,0(r3)
	*(CONFIRM_BUTTON_EDGE) = 0x00; // Resets the interrupt.
 514:	d0a00117 	ldw	r2,-32764(gp)
 518:	10000005 	stb	zero,0(r2)
	alt_ic_isr_register(SET_MODE_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 51c:	d8000015 	stw	zero,0(sp)
 520:	00007b00 	call	7b0 <alt_ic_isr_register>
						SET_MODE_BUTTON_IRQ,
						handle_set_mode_button_interrupt, 0, 0x0);

	// Registers the increase hour button input interrupt.
	alt_ic_isr_register(INC_HOUR_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 524:	01800034 	movhi	r6,0
 528:	d8000015 	stw	zero,0(sp)
 52c:	000f883a 	mov	r7,zero
 530:	31808d04 	addi	r6,r6,564
 534:	01400084 	movi	r5,2
 538:	0009883a 	mov	r4,zero
 53c:	00007b00 	call	7b0 <alt_ic_isr_register>
						INC_HOUR_BUTTON_IRQ,
						handle_increase_hour_interrupt, 0, 0x0);

	// Registers the increase minute button input interrupt.
	alt_ic_isr_register(INC_MIN_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 540:	01800034 	movhi	r6,0
 544:	d8000015 	stw	zero,0(sp)
 548:	000f883a 	mov	r7,zero
 54c:	31809f04 	addi	r6,r6,636
 550:	014000c4 	movi	r5,3
 554:	0009883a 	mov	r4,zero
 558:	00007b00 	call	7b0 <alt_ic_isr_register>
						INC_MIN_BUTTON_IRQ,
						handle_increase_min_interrupt, 0, 0x0);

	// Registers the increase minute button input interrupt.
	alt_ic_isr_register(CONFIRM_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,
 55c:	01800034 	movhi	r6,0
 560:	d8000015 	stw	zero,0(sp)
 564:	000f883a 	mov	r7,zero
 568:	3180b004 	addi	r6,r6,704
 56c:	01400104 	movi	r5,4
 570:	0009883a 	mov	r4,zero
 574:	00007b00 	call	7b0 <alt_ic_isr_register>
						CONFIRM_BUTTON_IRQ,
						handle_confirm_button_interrupt, 0, 0x0);

	alt_putstr("Interrupt registered ...\n");
 578:	01000034 	movhi	r4,0
 57c:	2102da04 	addi	r4,r4,2920

}
 580:	dfc00117 	ldw	ra,4(sp)
 584:	dec00204 	addi	sp,sp,8
	alt_putstr("Interrupt registered ...\n");
 588:	00009841 	jmpi	984 <alt_putstr>

0000058c <main>:

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 58c:	01000034 	movhi	r4,0
{ 
 590:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 594:	2102e104 	addi	r4,r4,2948
{ 
 598:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 59c:	00009840 	call	984 <alt_putstr>

  system_setup();
 5a0:	00004b00 	call	4b0 <system_setup>
  timer_setup();
 5a4:	00004740 	call	474 <timer_setup>

  // Event loop never exits.
  while (1)
  {
	  if (mode == TIME_MODE)
 5a8:	d0a00017 	ldw	r2,-32768(gp)
 5ac:	10800058 	cmpnei	r2,r2,1
 5b0:	1000041e 	bne	r2,zero,5c4 <main+0x38>
		  update_displays(hours + minutes);
 5b4:	d1203317 	ldw	r4,-32564(gp)
 5b8:	d0a03217 	ldw	r2,-32568(gp)
 5bc:	2089883a 	add	r4,r4,r2
 5c0:	00003980 	call	398 <update_displays>
	  if (mode == ALARM_MODE)
 5c4:	d0a00017 	ldw	r2,-32768(gp)
 5c8:	10800098 	cmpnei	r2,r2,2
 5cc:	1000041e 	bne	r2,zero,5e0 <main+0x54>
	  	  update_displays(hours + minutes);
 5d0:	d1203317 	ldw	r4,-32564(gp)
 5d4:	d0a03217 	ldw	r2,-32568(gp)
 5d8:	2089883a 	add	r4,r4,r2
 5dc:	00003980 	call	398 <update_displays>
	  if (mode == RUN_MODE)
 5e0:	d0a00017 	ldw	r2,-32768(gp)
 5e4:	108000d8 	cmpnei	r2,r2,3
 5e8:	103fef1e 	bne	r2,zero,5a8 <main+0x1c>
		  update_displays(time_counter);
 5ec:	d1203417 	ldw	r4,-32560(gp)
 5f0:	00003980 	call	398 <update_displays>
 5f4:	003fec06 	br	5a8 <main+0x1c>

000005f8 <__divsi3>:
 5f8:	20001a16 	blt	r4,zero,664 <__divsi3+0x6c>
 5fc:	000f883a 	mov	r7,zero
 600:	2800020e 	bge	r5,zero,60c <__divsi3+0x14>
 604:	014bc83a 	sub	r5,zero,r5
 608:	39c0005c 	xori	r7,r7,1
 60c:	200d883a 	mov	r6,r4
 610:	00c00044 	movi	r3,1
 614:	2900092e 	bgeu	r5,r4,63c <__divsi3+0x44>
 618:	00800804 	movi	r2,32
 61c:	00c00044 	movi	r3,1
 620:	00000106 	br	628 <__divsi3+0x30>
 624:	10001226 	beq	r2,zero,670 <__divsi3+0x78>
 628:	294b883a 	add	r5,r5,r5
 62c:	10bfffc4 	addi	r2,r2,-1
 630:	18c7883a 	add	r3,r3,r3
 634:	293ffb36 	bltu	r5,r4,624 <__divsi3+0x2c>
 638:	18000d26 	beq	r3,zero,670 <__divsi3+0x78>
 63c:	0005883a 	mov	r2,zero
 640:	31400236 	bltu	r6,r5,64c <__divsi3+0x54>
 644:	314dc83a 	sub	r6,r6,r5
 648:	10c4b03a 	or	r2,r2,r3
 64c:	1806d07a 	srli	r3,r3,1
 650:	280ad07a 	srli	r5,r5,1
 654:	183ffa1e 	bne	r3,zero,640 <__divsi3+0x48>
 658:	38000126 	beq	r7,zero,660 <__divsi3+0x68>
 65c:	0085c83a 	sub	r2,zero,r2
 660:	f800283a 	ret
 664:	0109c83a 	sub	r4,zero,r4
 668:	01c00044 	movi	r7,1
 66c:	003fe406 	br	600 <__divsi3+0x8>
 670:	0005883a 	mov	r2,zero
 674:	003ff806 	br	658 <__divsi3+0x60>

00000678 <__modsi3>:
 678:	20001a16 	blt	r4,zero,6e4 <__modsi3+0x6c>
 67c:	000f883a 	mov	r7,zero
 680:	2005883a 	mov	r2,r4
 684:	2800010e 	bge	r5,zero,68c <__modsi3+0x14>
 688:	014bc83a 	sub	r5,zero,r5
 68c:	00c00044 	movi	r3,1
 690:	2900092e 	bgeu	r5,r4,6b8 <__modsi3+0x40>
 694:	01800804 	movi	r6,32
 698:	00c00044 	movi	r3,1
 69c:	00000106 	br	6a4 <__modsi3+0x2c>
 6a0:	30000d26 	beq	r6,zero,6d8 <__modsi3+0x60>
 6a4:	294b883a 	add	r5,r5,r5
 6a8:	31bfffc4 	addi	r6,r6,-1
 6ac:	18c7883a 	add	r3,r3,r3
 6b0:	293ffb36 	bltu	r5,r4,6a0 <__modsi3+0x28>
 6b4:	18000826 	beq	r3,zero,6d8 <__modsi3+0x60>
 6b8:	1806d07a 	srli	r3,r3,1
 6bc:	11400136 	bltu	r2,r5,6c4 <__modsi3+0x4c>
 6c0:	1145c83a 	sub	r2,r2,r5
 6c4:	280ad07a 	srli	r5,r5,1
 6c8:	183ffb1e 	bne	r3,zero,6b8 <__modsi3+0x40>
 6cc:	38000126 	beq	r7,zero,6d4 <__modsi3+0x5c>
 6d0:	0085c83a 	sub	r2,zero,r2
 6d4:	f800283a 	ret
 6d8:	2005883a 	mov	r2,r4
 6dc:	383ffd26 	beq	r7,zero,6d4 <__modsi3+0x5c>
 6e0:	003ffb06 	br	6d0 <__modsi3+0x58>
 6e4:	0109c83a 	sub	r4,zero,r4
 6e8:	01c00044 	movi	r7,1
 6ec:	003fe406 	br	680 <__modsi3+0x8>

000006f0 <__udivsi3>:
 6f0:	200d883a 	mov	r6,r4
 6f4:	2900152e 	bgeu	r5,r4,74c <__udivsi3+0x5c>
 6f8:	28001416 	blt	r5,zero,74c <__udivsi3+0x5c>
 6fc:	00800804 	movi	r2,32
 700:	00c00044 	movi	r3,1
 704:	00000206 	br	710 <__udivsi3+0x20>
 708:	10000e26 	beq	r2,zero,744 <__udivsi3+0x54>
 70c:	28000516 	blt	r5,zero,724 <__udivsi3+0x34>
 710:	294b883a 	add	r5,r5,r5
 714:	10bfffc4 	addi	r2,r2,-1
 718:	18c7883a 	add	r3,r3,r3
 71c:	293ffa36 	bltu	r5,r4,708 <__udivsi3+0x18>
 720:	18000826 	beq	r3,zero,744 <__udivsi3+0x54>
 724:	0005883a 	mov	r2,zero
 728:	31400236 	bltu	r6,r5,734 <__udivsi3+0x44>
 72c:	314dc83a 	sub	r6,r6,r5
 730:	10c4b03a 	or	r2,r2,r3
 734:	1806d07a 	srli	r3,r3,1
 738:	280ad07a 	srli	r5,r5,1
 73c:	183ffa1e 	bne	r3,zero,728 <__udivsi3+0x38>
 740:	f800283a 	ret
 744:	0005883a 	mov	r2,zero
 748:	f800283a 	ret
 74c:	00c00044 	movi	r3,1
 750:	003ff406 	br	724 <__udivsi3+0x34>

00000754 <__umodsi3>:
 754:	2005883a 	mov	r2,r4
 758:	2900132e 	bgeu	r5,r4,7a8 <__umodsi3+0x54>
 75c:	28001216 	blt	r5,zero,7a8 <__umodsi3+0x54>
 760:	01800804 	movi	r6,32
 764:	00c00044 	movi	r3,1
 768:	00000206 	br	774 <__umodsi3+0x20>
 76c:	30000c26 	beq	r6,zero,7a0 <__umodsi3+0x4c>
 770:	28000516 	blt	r5,zero,788 <__umodsi3+0x34>
 774:	294b883a 	add	r5,r5,r5
 778:	31bfffc4 	addi	r6,r6,-1
 77c:	18c7883a 	add	r3,r3,r3
 780:	293ffa36 	bltu	r5,r4,76c <__umodsi3+0x18>
 784:	18000626 	beq	r3,zero,7a0 <__umodsi3+0x4c>
 788:	1806d07a 	srli	r3,r3,1
 78c:	11400136 	bltu	r2,r5,794 <__umodsi3+0x40>
 790:	1145c83a 	sub	r2,r2,r5
 794:	280ad07a 	srli	r5,r5,1
 798:	183ffb1e 	bne	r3,zero,788 <__umodsi3+0x34>
 79c:	f800283a 	ret
 7a0:	2005883a 	mov	r2,r4
 7a4:	f800283a 	ret
 7a8:	00c00044 	movi	r3,1
 7ac:	003ff606 	br	788 <__umodsi3+0x34>

000007b0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 7b0:	000083c1 	jmpi	83c <alt_iic_isr_register>

000007b4 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 7b4:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 7b8:	00ffff84 	movi	r3,-2
 7bc:	20c6703a 	and	r3,r4,r3
 7c0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 7c4:	00800044 	movi	r2,1
 7c8:	d0e03617 	ldw	r3,-32552(gp)
 7cc:	1144983a 	sll	r2,r2,r5
 7d0:	10c4b03a 	or	r2,r2,r3
 7d4:	d0a03615 	stw	r2,-32552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 7d8:	d0a03617 	ldw	r2,-32552(gp)
 7dc:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 7e0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 7e4:	0005883a 	mov	r2,zero
 7e8:	f800283a 	ret

000007ec <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 7ec:	0009303a 	rdctl	r4,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 7f0:	00ffff84 	movi	r3,-2
 7f4:	20c6703a 	and	r3,r4,r3
 7f8:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
 7fc:	00bfff84 	movi	r2,-2
 800:	d0e03617 	ldw	r3,-32552(gp)
 804:	1144183a 	rol	r2,r2,r5
 808:	10c4703a 	and	r2,r2,r3
 80c:	d0a03615 	stw	r2,-32552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 810:	d0a03617 	ldw	r2,-32552(gp)
 814:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 818:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 81c:	0005883a 	mov	r2,zero
 820:	f800283a 	ret

00000824 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 824:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 828:	00c00044 	movi	r3,1
 82c:	1946983a 	sll	r3,r3,r5
 830:	1884703a 	and	r2,r3,r2
}
 834:	1004c03a 	cmpne	r2,r2,zero
 838:	f800283a 	ret

0000083c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 83c:	28c00808 	cmpgei	r3,r5,32
 840:	1800161e 	bne	r3,zero,89c <alt_iic_isr_register+0x60>
{
 844:	defffe04 	addi	sp,sp,-8
 848:	dfc00115 	stw	ra,4(sp)
 84c:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 850:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 854:	00bfff84 	movi	r2,-2
 858:	8084703a 	and	r2,r16,r2
 85c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 860:	280690fa 	slli	r3,r5,3
 864:	00800034 	movhi	r2,0
 868:	10832404 	addi	r2,r2,3216
 86c:	10c5883a 	add	r2,r2,r3
 870:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 874:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 878:	30000626 	beq	r6,zero,894 <alt_iic_isr_register+0x58>
 87c:	00007b40 	call	7b4 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 880:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 884:	dfc00117 	ldw	ra,4(sp)
 888:	dc000017 	ldw	r16,0(sp)
 88c:	dec00204 	addi	sp,sp,8
 890:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 894:	00007ec0 	call	7ec <alt_ic_irq_disable>
 898:	003ff906 	br	880 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 89c:	00bffa84 	movi	r2,-22
}
 8a0:	f800283a 	ret

000008a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8a4:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8a8:	00800034 	movhi	r2,0
 8ac:	00c00034 	movhi	r3,0
 8b0:	dfc00015 	stw	ra,0(sp)
 8b4:	1082e704 	addi	r2,r2,2972
 8b8:	18c30004 	addi	r3,r3,3072
 8bc:	10c00326 	beq	r2,r3,8cc <alt_load+0x28>
  {
    while( to != end )
 8c0:	01000034 	movhi	r4,0
 8c4:	21030004 	addi	r4,r4,3072
 8c8:	1100141e 	bne	r2,r4,91c <alt_load+0x78>
  if (to != from)
 8cc:	00800034 	movhi	r2,0
 8d0:	00c00034 	movhi	r3,0
 8d4:	10800804 	addi	r2,r2,32
 8d8:	18c00804 	addi	r3,r3,32
 8dc:	10c00326 	beq	r2,r3,8ec <alt_load+0x48>
    while( to != end )
 8e0:	01000034 	movhi	r4,0
 8e4:	21006004 	addi	r4,r4,384
 8e8:	1100111e 	bne	r2,r4,930 <alt_load+0x8c>
  if (to != from)
 8ec:	00800034 	movhi	r2,0
 8f0:	00c00034 	movhi	r3,0
 8f4:	10829e04 	addi	r2,r2,2680
 8f8:	18c29e04 	addi	r3,r3,2680
 8fc:	10c00326 	beq	r2,r3,90c <alt_load+0x68>
    while( to != end )
 900:	01000034 	movhi	r4,0
 904:	2102e704 	addi	r4,r4,2972
 908:	11000e1e 	bne	r2,r4,944 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 90c:	0000a240 	call	a24 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 910:	dfc00017 	ldw	ra,0(sp)
 914:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 918:	0000a281 	jmpi	a28 <alt_icache_flush_all>
    {
      *to++ = *from++;
 91c:	19400017 	ldw	r5,0(r3)
 920:	10800104 	addi	r2,r2,4
 924:	18c00104 	addi	r3,r3,4
 928:	117fff15 	stw	r5,-4(r2)
 92c:	003fe606 	br	8c8 <alt_load+0x24>
 930:	19400017 	ldw	r5,0(r3)
 934:	10800104 	addi	r2,r2,4
 938:	18c00104 	addi	r3,r3,4
 93c:	117fff15 	stw	r5,-4(r2)
 940:	003fe906 	br	8e8 <alt_load+0x44>
 944:	19400017 	ldw	r5,0(r3)
 948:	10800104 	addi	r2,r2,4
 94c:	18c00104 	addi	r3,r3,4
 950:	117fff15 	stw	r5,-4(r2)
 954:	003fec06 	br	908 <alt_load+0x64>

00000958 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 958:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 95c:	0009883a 	mov	r4,zero
{
 960:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 964:	00009bc0 	call	9bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 968:	00009dc0 	call	9dc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 96c:	d1a03717 	ldw	r6,-32548(gp)
 970:	d1603817 	ldw	r5,-32544(gp)
 974:	d1203917 	ldw	r4,-32540(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 978:	dfc00017 	ldw	ra,0(sp)
 97c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 980:	000058c1 	jmpi	58c <main>

00000984 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 984:	defffe04 	addi	sp,sp,-8
 988:	dc000015 	stw	r16,0(sp)
 98c:	dfc00115 	stw	ra,4(sp)
 990:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 994:	0000a5c0 	call	a5c <strlen>
 998:	01000034 	movhi	r4,0
 99c:	000f883a 	mov	r7,zero
 9a0:	100d883a 	mov	r6,r2
 9a4:	800b883a 	mov	r5,r16
 9a8:	2102ff04 	addi	r4,r4,3068
#else
    return fputs(str, stdout);
#endif
#endif
}
 9ac:	dfc00117 	ldw	ra,4(sp)
 9b0:	dc000017 	ldw	r16,0(sp)
 9b4:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 9b8:	00009f41 	jmpi	9f4 <altera_avalon_jtag_uart_write>

000009bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 9bc:	deffff04 	addi	sp,sp,-4
 9c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 9c4:	0000a540 	call	a54 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 9c8:	00800044 	movi	r2,1
 9cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 9d0:	dfc00017 	ldw	ra,0(sp)
 9d4:	dec00104 	addi	sp,sp,4
 9d8:	f800283a 	ret

000009dc <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
 9dc:	00880004 	movi	r2,8192
 9e0:	d0a03b15 	stw	r2,-32532(gp)
 9e4:	0080bef4 	movhi	r2,763
 9e8:	10bc2004 	addi	r2,r2,-3968
 9ec:	d0a03a15 	stw	r2,-32536(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
}
 9f0:	f800283a 	ret

000009f4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 9f4:	21000017 	ldw	r4,0(r4)
{
 9f8:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
 9fc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 a00:	29800136 	bltu	r5,r6,a08 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 a04:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 a08:	20c00137 	ldwio	r3,4(r4)
 a0c:	18ffffec 	andhi	r3,r3,65535
 a10:	183ffb26 	beq	r3,zero,a00 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 a14:	29400044 	addi	r5,r5,1
 a18:	28ffffc7 	ldb	r3,-1(r5)
 a1c:	20c00035 	stwio	r3,0(r4)
 a20:	003ff706 	br	a00 <altera_avalon_jtag_uart_write+0xc>

00000a24 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 a24:	f800283a 	ret

00000a28 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 a28:	f800283a 	ret

00000a2c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 a2c:	213ffe84 	addi	r4,r4,-6
 a30:	20800428 	cmpgeui	r2,r4,16
 a34:	1000051e 	bne	r2,zero,a4c <alt_exception_cause_generated_bad_addr+0x20>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 a38:	00800044 	movi	r2,1
 a3c:	1104983a 	sll	r2,r2,r4
 a40:	10a2c8cc 	andi	r2,r2,35619
 a44:	1004c03a 	cmpne	r2,r2,zero
 a48:	f800283a 	ret
  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;

  default:
    return 0;
 a4c:	0005883a 	mov	r2,zero
  }
}
 a50:	f800283a 	ret

00000a54 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 a54:	000170fa 	wrctl	ienable,zero
}
 a58:	f800283a 	ret

00000a5c <strlen>:
 a5c:	2005883a 	mov	r2,r4
 a60:	10c00007 	ldb	r3,0(r2)
 a64:	1800021e 	bne	r3,zero,a70 <strlen+0x14>
 a68:	1105c83a 	sub	r2,r2,r4
 a6c:	f800283a 	ret
 a70:	10800044 	addi	r2,r2,1
 a74:	003ffa06 	br	a60 <strlen+0x4>
